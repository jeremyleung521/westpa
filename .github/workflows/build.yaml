name: Build

# Build on every branch push, tag push, and pull request change:
#on: [push] #, pull_request]
# Alternatively, to publish when a (published) GitHub Release is created, use the following:
on:
  push:
    branches:
      - 'CI_test'
#  pull_request:
  release:
    types:
      - published

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}-py3.${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [7, 8, 9, 10] # sub-versions of Python

    steps:
      - uses: actions/checkout@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.10.2
        env:
          CIBW_SKIP: "pp* *-musllinux*"
          CIBW_BUILD: "cp3${{ matrix.python-version }}-*"
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_ARCHS_LINUX: auto64
          CIBW_TEST_SKIP: "*-macosx_arm64"
          CIBW_TEST_COMMAND: > 
            python -c "import westpa" && 
            python -c "import westpa.core.propagators2" &&
            python -c "import westpa.core.binning" &&
            python -c "import westpa.core.kinetics" &&
            python -c "import westpa.core.reweight" &&
            python -c "import westpa.work_managers" &&
            python -c "import westpa.tools" &&
            python -c "import westpa.fasthist" &&
            python -c "import westpa.mclib"
            # Currently blocked by https://github.com/westpa/westpa/issues/70
            #python -c "import westpa.trajtree"
        with:
          package-dir: .
          output-dir: wheelhouse
          config-file: "{package}/pyproject.toml"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Build sdist
        run: pipx run build --sdist

#       # More info on options: https://github.com/goanpeca/setup-miniconda
#       - uses: conda-incubator/setup-miniconda@v2
#         with:
#           python-version: ${{ matrix.python-version }}
#           environment-file: devtools/conda-envs/test_env.yaml
#           activate-environment: test_env
#           auto-update-conda: true
#           auto-activate-base: false
#           show-channel-urls: true

      - name: Install from sdist and import
        run: |
          python -m pip install dist/*.tar.gz &&
          python -c "import westpa" && 
          python -c "import westpa.core.propagators2" &&
          python -c "import westpa.core.binning" &&
          python -c "import westpa.core.kinetics" &&
          python -c "import westpa.core.reweight" &&
          python -c "import westpa.work_managers" &&
          python -c "import westpa.tools" &&
          python -c "import westpa.fasthist" &&
          python -c "import westpa.mclib" &&
          echo "All done!"
         
      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.test_pypi_upload }}
          # To test: 
          repository_url: https://test.pypi.org/legacy/
